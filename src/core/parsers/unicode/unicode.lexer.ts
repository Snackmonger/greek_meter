import { TokenType } from "../../../common/enums";
import Lexer from "../../../common/lexer";
import Token from "../../../common/token";

/**
 * The lexer recognizes NFKD normalized Greek text, with a set of standard
 * editorial symbols.
 */
export let unicodeGreekLexer = new Lexer(Token)
  .addRule(TokenType.ALPHA, /[αΑ]/)
  .addRule(TokenType.BETA, /[βΒ]/)
  .addRule(TokenType.GAMMA, /[γΓ]/)
  .addRule(TokenType.DELTA, /[δΔ]/)
  .addRule(TokenType.EPSILON, /[εΕ]/)
  .addRule(TokenType.ZETA, /[ζΖ]/)
  .addRule(TokenType.ETA, /[ηΗ]/)
  .addRule(TokenType.THETA, /[θΘ]/)
  .addRule(TokenType.IOTA, /[ιΙ]/)
  .addRule(TokenType.KAPPA, /[κΚ]/)
  .addRule(TokenType.LAMBDA, /[λΛ]/)
  .addRule(TokenType.MU, /[μΜ]/)
  .addRule(TokenType.NU, /[νΝ]/)
  .addRule(TokenType.XI, /[ξΞ]/)
  .addRule(TokenType.OMICRON, /[οΟ]/)
  .addRule(TokenType.PI, /[πΠ]/)
  .addRule(TokenType.RHO, /[ρΡ]/)
  .addRule(TokenType.SIGMA, /[ςσΣ]/)
  .addRule(TokenType.TAU, /[τΤ]/)
  .addRule(TokenType.UPSILON, /[υΥ]/)
  .addRule(TokenType.PHI, /[φΦ]/)
  .addRule(TokenType.CHI, /[χΧ]/)
  .addRule(TokenType.PSI, /[ψΨ]/)
  .addRule(TokenType.OMEGA, /[ωΩ]/)
  .addRule(TokenType.DIGAMMA, /[ϝϜ]/)
  .addRule(TokenType.KOPPA, /[Ϟϟ]/)
  .addRule(TokenType.STIGMA, /[Ϛϛ]/)
  .addRule(TokenType.SANPI, /[ϡ]/)

  .addRule(TokenType.SECTION_NUMBER, /^\(\d+\)/)
  .addRule(TokenType.LINE_NUMBER, /\(\d+\)$/)
  .addRule(TokenType.NEW_PAGE, /@\d+/)
  .addRule(TokenType.EDITORIAL_SYMBOL, /[ʹ※⸖><ϾϿϽ†?*\/!|=+%:•‡§'¦‖⏕×⏒⏓⏔=~Ο±⁂÷¶]/)

  .addRule(TokenType.WHITESPACE, /[ ]/)
  .addRule(TokenType.TAB, /[\t]/)
  .addRule(TokenType.NEWLINE, /[\n]/)

  .addRule(TokenType.PERIOD, /\./)
  .addRule(TokenType.COMMA, /,/)
  .addRule(TokenType.HYPHEN, /-/)
  .addRule(TokenType.OPEN_PAREN, /\(/)
  .addRule(TokenType.CLOSE_PAREN, /\)/)
  .addRule(TokenType.OPEN_BRACE, /\{/)
  .addRule(TokenType.CLOSE_BRACE, /\}/)
  .addRule(TokenType.OPEN_BRACKET, /\[/)
  .addRule(TokenType.CLOSE_BRACKET, /\]/)
  .addRule(TokenType.EXCLAMATION, /\!/)
  .addRule(TokenType.QUESTION, /;/)
  .addRule(TokenType.APOSTROPHE, /[’'‛]/)
  .addRule(TokenType.MIDDLEDOT, /·/)
  .addRule(TokenType.COLON, /:/)
  .addRule(TokenType.ELLIPSIS, /…/)
  .addRule(TokenType.OPEN_GUILLEMET, /«/)
  .addRule(TokenType.CLOSE_GUILLEMET, /«/)

  .addRule(TokenType.ACUTE, /́/)
  .addRule(TokenType.GRAVE, /̀/)
  .addRule(TokenType.CIRCUMFLEX, /͂/)
  .addRule(TokenType.ROUGH, /̔/)
  .addRule(TokenType.SMOOTH, /̓/)
  .addRule(TokenType.SUBSCRIPT, /ͅ/)
  .addRule(TokenType.DIAERESIS, /̈/)
  .addRule(TokenType.BREVE, /̆/)
  .addRule(TokenType.MACRON, /̄/)
  .addRule(TokenType.UNDERDOT, /̣/)
